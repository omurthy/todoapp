[{"D:\\CODE\\ReactJSProjects\\todoapp\\src\\index.js":"1","D:\\CODE\\ReactJSProjects\\todoapp\\src\\App.js":"2","D:\\CODE\\ReactJSProjects\\todoapp\\src\\context\\TodoContext.js":"3","D:\\CODE\\ReactJSProjects\\todoapp\\src\\context\\reducer.js":"4","D:\\CODE\\ReactJSProjects\\todoapp\\src\\components\\TodoList.jsx":"5","D:\\CODE\\ReactJSProjects\\todoapp\\src\\components\\Todo.jsx":"6"},{"size":626,"mtime":1609018239901,"results":"7","hashOfConfig":"8"},{"size":1307,"mtime":1609030990286,"results":"9","hashOfConfig":"8"},{"size":411,"mtime":1609018687086,"results":"10","hashOfConfig":"8"},{"size":1120,"mtime":1609029364545,"results":"11","hashOfConfig":"8"},{"size":274,"mtime":1609020276850,"results":"12","hashOfConfig":"8"},{"size":2261,"mtime":1609031088548,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1lhx7ry",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"27"},"D:\\CODE\\ReactJSProjects\\todoapp\\src\\index.js",[],["28","29"],"D:\\CODE\\ReactJSProjects\\todoapp\\src\\App.js",[],"D:\\CODE\\ReactJSProjects\\todoapp\\src\\context\\TodoContext.js",[],"D:\\CODE\\ReactJSProjects\\todoapp\\src\\context\\reducer.js",[],"D:\\CODE\\ReactJSProjects\\todoapp\\src\\components\\TodoList.jsx",[],"D:\\CODE\\ReactJSProjects\\todoapp\\src\\components\\Todo.jsx",["30","31","32"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { GrFormClose, GrFormEdit, GrFormCheckmark } from \"react-icons/gr\";\r\nimport { useTodoLayerValue } from \"../context/TodoContext\";\r\nconst Todo = ({ todo }) => {\r\n\r\n    const [{ }, dispatch] = useTodoLayerValue();\r\n\r\n    const [editable, setEditable] = useState(false);\r\n    const [content, setContent] = useState(todo.content);\r\n\r\n    const removeTodo = todoId => {\r\n        dispatch({\r\n            type: \"REMOVE_TODO\",\r\n            payload: todoId,\r\n        })\r\n    }\r\n    const completeTodo = todoId => {\r\n        dispatch({\r\n            type: \"COMPLETE_TODO\",\r\n            payload: todoId,\r\n        })\r\n    }\r\n    const updateTodo = ({todoId,newValue}) => {\r\n        dispatch({\r\n            type: \"UPDATE_TODO\",\r\n            payload: {\r\n                todoId,\r\n                newValue\r\n            },\r\n        })\r\n    }\r\n    const todoStyle = clsx({\r\n        ['todo-row']: true,\r\n        ['completed']: todo.isCompleted,\r\n    });\r\n\r\n    return (\r\n        <div className={todoStyle}>\r\n            <div onClick={() => editable ? '' : completeTodo(todo.id)}>\r\n                {\r\n                    editable ?\r\n                        (<input \r\n                            type=\"text\" \r\n                            value={content} \r\n                            onChange={event => setContent(event.target.value)} \r\n                            className = \"todo-input-edit\"\r\n                            />) :\r\n                        (todo.content)\r\n                } </div>\r\n            <div className=\"todo-icons\">\r\n                <GrFormClose className=\"todo-icon\" onClick={() => removeTodo(todo.id)} />\r\n                {\r\n                    editable ? <GrFormCheckmark className = \"todo-icon\" onClick={()=> {\r\n                        updateTodo({\r\n                            todoId:todo.id,\r\n                            newValue:content\r\n                        })\r\n                        setContent(\"\")\r\n                        setEditable(false);\r\n                    }} /> :\r\n                    (<GrFormEdit className=\"todo-icon\" onClick={() => setEditable(true)} />)\r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":7,"column":12,"nodeType":"39","messageId":"40","endLine":7,"endColumn":15},{"ruleId":"41","severity":1,"message":"42","line":34,"column":9,"nodeType":"43","messageId":"44","endLine":34,"endColumn":27,"fix":"45"},{"ruleId":"41","severity":1,"message":"46","line":35,"column":9,"nodeType":"43","messageId":"44","endLine":35,"endColumn":40,"fix":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-useless-computed-key","Unnecessarily computed property ['todo-row'] found.","Property","unnecessarilyComputedProperty",{"range":"50","text":"51"},"Unnecessarily computed property ['completed'] found.",{"range":"52","text":"53"},"no-global-assign","no-unsafe-negation",[937,949],"'todo-row'",[966,979],"'completed'"]